import java.util.Stack;

public class InfixToPostfix {

    public static int precedence(char ch) {
        switch (ch) {
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
            case '%':
                return 2;
            case '^':
                return 3;
        }
        return -1;
    }

    public static String infixToPostfix(String expression) {
        StringBuilder result = new StringBuilder();
        Stack<Character> stack = new Stack<>();
        char[] tokens = expression.toCharArray();

        for (int i = 0; i < tokens.length; ++i) {
            char c = tokens[i];

            if (c == ' ') {
                continue; // skip spaces
            }

            // If the scanned character is an operand (number), add it to the output.
            if (Character.isDigit(c)) {
                while (i < tokens.length && Character.isDigit(tokens[i])) {
                    result.append(tokens[i++]);
                }
                result.append(' ');
                i--; // because the for loop will also increment i
            } else if (c == '(') {
                stack.push(c);
            } else if (c == ')') {
                // If the scanned character is an ')', pop and output from the stack
                // until an '(' is encountered.
                while (!stack.isEmpty() && stack.peek() != '(') {
                    result.append(stack.pop()).append(' ');
                }

                if (!stack.isEmpty() && stack.peek() != '(')
                    return "Invalid Expression"; // invalid expression                
                else
                    stack.pop();
            } else { // an operator is encountered
                while (!stack.isEmpty() && precedence(c) <= precedence(stack.peek())) {
                    if (stack.peek() == '(')
                        return "Invalid Expression";
                    result.append(stack.pop()).append(' ');
                }
                stack.push(c);
            }
        }

        // Pop all the operators from the stack
        while (!stack.isEmpty()) {
            if (stack.peek() == '(')
                return "Invalid Expression";
            result.append(stack.pop()).append(' ');
        }
        return result.toString().trim();
    }

    public static void main(String[] args) {
        String exp = "8 / 4 * 3 - 5 * 6 + ( 7 - 2 * 9 % 2 ^ 3 ) + 8 * 9 ";
        System.out.println("\nInfix Expression: " + exp);
        System.out.println("Postfix Expression: " + infixToPostfix(exp));
    }
}
