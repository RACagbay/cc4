import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class AVLNode {
    int data;
    AVLNode left;
    AVLNode right;
    int height;

    AVLNode(int data) {
        this.data = data;
        this.height = 1;
    }
}

class NodeData {
    int index;
    int data;

    NodeData(int index, int data) {
        this.index = index;
        this.data = data;
    }
}

public class AVLTree {
    private AVLNode root;

    private int height(AVLNode node) {
        if (node == null)
            return 0;
        return node.height;
    }

    private int getBalance(AVLNode node) {
        if (node == null)
            return 0;
        return height(node.left) - height(node.right);
    }

    private AVLNode rightRotate(AVLNode y) {
        AVLNode x = y.left;
        AVLNode T2 = x.right;

        x.right = y;
        y.left = T2;

        y.height = Math.max(height(y.left), height(y.right)) + 1;
        x.height = Math.max(height(x.left), height(x.right)) + 1;

        return x;
    }

    private AVLNode leftRotate(AVLNode x) {
        AVLNode y = x.right;
        AVLNode T2 = y.left;

        y.left = x;
        x.right = T2;

        x.height = Math.max(height(x.left), height(x.right)) + 1;
        y.height = Math.max(height(y.left), height(y.right)) + 1;

        return y;
    }

    public AVLNode insert(AVLNode node, int data) {
        if (node == null)
            return new AVLNode(data);

        if (data < node.data)
            node.left = insert(node.left, data);
        else if (data > node.data)
            node.right = insert(node.right, data);
        else
            return node;

        node.height = 1 + Math.max(height(node.left), height(node.right));

        int balance = getBalance(node);

        if (balance > 1 && data < node.left.data)
            return rightRotate(node);

        if (balance < -1 && data > node.right.data)
            return leftRotate(node);

        if (balance > 1 && data > node.left.data) {
            node.left = leftRotate(node.left);
            return rightRotate(node);
        }

        if (balance < -1 && data < node.right.data) {
            node.right = rightRotate(node.right);
            return leftRotate(node);
        }

        return node;
    }

    public AVLNode delete(AVLNode root, int data) {
        if (root == null)
            return root;

        if (data < root.data)
            root.left = delete(root.left, data);
        else if (data > root.data)
            root.right = delete(root.right, data);
        else {
            if (root.left == null || root.right == null) {
                AVLNode temp = null;
                if (temp == root.left)
                    temp = root.right;
                else
                    temp = root.left;

                if (temp == null) {
                    temp = root;
                    root = null;
                } else
                    root = temp;
            } else {
                AVLNode temp = minValueNode(root.right);
                root.data = temp.data;
                root.right = delete(root.right, temp.data);
            }
        }

        if (root == null)
            return root;

        root.height = Math.max(height(root.left), height(root.right)) + 1;

        int balance = getBalance(root);

        if (balance > 1 && getBalance(root.left) >= 0)
            return rightRotate(root);

        if (balance > 1 && getBalance(root.left) < 0) {
            root.left = leftRotate(root.left);
            return rightRotate(root);
        }

        if (balance < -1 && getBalance(root.right) <= 0)
            return leftRotate(root);

        if (balance < -1 && getBalance(root.right) > 0) {
            root.right = rightRotate(root.right);
            return leftRotate(root);
        }

        return root;
    }

    private AVLNode minValueNode(AVLNode node) {
        AVLNode current = node;
        while (current.left != null)
            current = current.left;
        return current;
    }

    public void inOrder(AVLNode node) {
        if (node != null) {
            inOrder(node.left);
            System.out.print(node.data + " ");
            inOrder(node.right);
        }
    }

    public void preOrder(AVLNode node) {
        if (node != null) {
            System.out.print(node.data + " ");
            preOrder(node.left);
            preOrder(node.right);
        }
    }

    public void postOrder(AVLNode node) {
        if (node != null) {
            postOrder(node.left);
            postOrder(node.right);
            System.out.print(node.data + " ");
        }
    }

    public List<NodeData> printArrayRepresentation(AVLNode node, int index) {
        List<NodeData> nodeList = new ArrayList<>();

        if (node == null) {
            nodeList.add(new NodeData(index, 0));
            return nodeList;
        }

        nodeList.add(new NodeData(index, node.data));
        nodeList.addAll(printArrayRepresentation(node.left, 2 * index + 1));
        nodeList.addAll(printArrayRepresentation(node.right, 2 * index + 2));

        return nodeList;
    }

    public static void main(String[] args) {
        AVLTree tree = new AVLTree();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\n1. Insert");
            System.out.println("2. Delete");
            System.out.println("3. In-order Traversal");
            System.out.println("4. Pre-order Traversal");
            System.out.println("5. Post-order Traversal");
            System.out.println("6. Represent AVL Tree in 1-D array");
            System.out.println("7. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter value to insert: ");
                    int value = scanner.nextInt();
                    tree.root = tree.insert(tree.root, value);
                    break;
                case 2:
                    System.out.print("Enter value to delete: ");
                    int valueToDelete = scanner.nextInt();
                    tree.root = tree.delete(tree.root, valueToDelete);
                    break;
                case 3:
                    System.out.println("In-order Traversal:");
                    tree.inOrder(tree.root);
                    break;
                case 4:
                    System.out.println("Pre-order Traversal:");
                    tree.preOrder(tree.root);
                    break;
                case 5:
                    System.out.println("Post-order Traversal:");
                    tree.postOrder(tree.root);
                    break;
                case 6:
                    System.out.println("Array Representation of AVL Tree:");
                    int height = tree.height(tree.root);
                    int size = (int) Math.pow(2, height) - 1;
                    List<NodeData> nodeList = tree.printArrayRepresentation(tree.root, 0);
                    for (NodeData nodeData : nodeList)
                        System.out.println("Index: " + nodeData.index + ", Data: " + nodeData.data);
                    break;
                case 7:
                    System.out.println("Exiting...");
                    scanner.close();
                    System.exit(0);
                    break;
                default:
                    System.out.println("Invalid choice. Please enter a valid option.");
            }
        }
    }
}
